<application>
  <component name="ProjectManager">
    <defaultProject>
      <component name="CheckStyle-IDEA">
        <option name="configuration">
          <map>
            <entry key="checkstyle-version" value="9.2" />
            <entry key="copy-libs" value="false" />
            <entry key="location-0" value="BUNDLED:(bundled):Sun Checks" />
            <entry key="location-1" value="BUNDLED:(bundled):Google Checks" />
            <entry key="scan-before-checkin" value="false" />
            <entry key="scanscope" value="JavaOnly" />
            <entry key="suppress-errors" value="false" />
          </map>
        </option>
      </component>
      <component name="CodeInsightWorkspaceSettings">
        <option name="optimizeImportsOnTheFly" value="true" />
      </component>
      <component name="JavaDocConfiguration">
        <GENERAL>
          <MODE>UPDATE</MODE>
          <OVERRIDDEN_METHODS>false</OVERRIDDEN_METHODS>
          <SPLITTED_CLASS_NAME>true</SPLITTED_CLASS_NAME>
          <LEVELS>
            <LEVEL>METHOD</LEVEL>
            <LEVEL>FIELD</LEVEL>
            <LEVEL>TYPE</LEVEL>
          </LEVELS>
          <VISIBILITIES>
            <VISIBILITY>DEFAULT</VISIBILITY>
            <VISIBILITY>PUBLIC</VISIBILITY>
            <VISIBILITY>PROTECTED</VISIBILITY>
          </VISIBILITIES>
        </GENERAL>
        <TEMPLATES>
          <CLASSES>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+interface\s+\w+.*</KEY>
              <VALUE>/**\n
 * The interface ${name}.\n
&lt;#if element.typeParameters?has_content&gt;        * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
        * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+enum\s+\w+.*</KEY>
              <VALUE>/**\n
 * The enum ${name}.\n
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>^.*(public|protected|private)*.+class\s+\w+.*</KEY>
              <VALUE>/**\n
 * The type ${name}.\n
&lt;#if element.typeParameters?has_content&gt;        * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
        * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
 */</VALUE>
            </CLASS>
            <CLASS>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * The type ${name}.\n
 */</VALUE>
            </CLASS>
          </CLASSES>
          <CONSTRUCTORS>
            <CONSTRUCTOR>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * Instantiates a new ${name}.\n
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </CONSTRUCTOR>
          </CONSTRUCTORS>
          <METHODS>
            <METHOD>
              <KEY>^.*(public|protected|private)*\s*.*(\w(\s*&lt;.+&gt;)*)+\s+get\w+\s*\(.*\).+</KEY>
              <VALUE>/**\n
 * Gets ${partName}.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${partName}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>^.*(public|protected|private)*\s*.*(void|\w(\s*&lt;.+&gt;)*)+\s+set\w+\s*\(.*\).+</KEY>
              <VALUE>/**\n
 * Sets ${partName}.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${partName}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>^.*((public\s+static)|(static\s+public))\s+void\s+main\s*\(\s*String\s*(\[\s*\]|\.\.\.)\s+\w+\s*\).+</KEY>
              <VALUE>/**\n
 * The entry point of application.\n

     &lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
     * @param ${element.parameterList.parameters[0].name} the input arguments\n
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
            <METHOD>
              <KEY>.+</KEY>
              <VALUE>/**\n
 * ${name}&lt;#if isNotVoid&gt; ${return}&lt;/#if&gt;.\n
&lt;#if element.typeParameters?has_content&gt;         * \n
&lt;/#if&gt;
&lt;#list element.typeParameters as typeParameter&gt;
         * @param &lt;${typeParameter.name}&gt; the type parameter\n
&lt;/#list&gt;
&lt;#if element.parameterList.parameters?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.parameterList.parameters as parameter&gt;
         * @param ${parameter.name} the ${paramNames[parameter.name]}\n
&lt;/#list&gt;
&lt;#if isNotVoid&gt;
         *\n
         * @return the ${return}\n
&lt;/#if&gt;
&lt;#if element.throwsList.referenceElements?has_content&gt;
         *\n
&lt;/#if&gt;
&lt;#list element.throwsList.referenceElements as exception&gt;
         * @throws ${exception.referenceName} the ${exceptionNames[exception.referenceName]}\n
&lt;/#list&gt;
 */</VALUE>
            </METHOD>
          </METHODS>
          <FIELDS>
            <FIELD>
              <KEY>^.*(public|protected|private)*.+static.*(\w\s\w)+.+</KEY>
              <VALUE>/**\n
 * The constant ${element.getName()}.\n
 */</VALUE>
            </FIELD>
            <FIELD>
              <KEY>^.*(public|protected|private)*.*(\w\s\w)+.+</KEY>
              <VALUE>/**\n
    &lt;#if element.parent.isInterface()&gt;
        * The constant ${element.getName()}.\n
&lt;#else&gt;
        * The ${name}.\n
&lt;/#if&gt; */</VALUE>
            </FIELD>
            <FIELD>
              <KEY>.+</KEY>
              <VALUE>/**\n
    &lt;#if element.parent.isEnum()&gt;
        *${name} ${typeName}.\n
&lt;#else&gt;
        * The ${name}.\n
&lt;/#if&gt;*/</VALUE>
            </FIELD>
          </FIELDS>
        </TEMPLATES>
      </component>
      <component name="ProjectInspectionProfilesVisibleTreeState">
        <entry key="Project Default">
          <profile-state>
            <expanded-state>
              <State />
              <State>
                <id>Android</id>
              </State>
              <State>
                <id>Class metricsJava</id>
              </State>
              <State>
                <id>Code style issuesJava</id>
              </State>
              <State>
                <id>CodePlugin DevKit</id>
              </State>
              <State>
                <id>ComplianceLintAndroid</id>
              </State>
              <State>
                <id>CorrectnessLintAndroid</id>
              </State>
              <State>
                <id>General</id>
              </State>
              <State>
                <id>Groovy</id>
              </State>
              <State>
                <id>Java</id>
              </State>
              <State>
                <id>Java 5Java language level migration aidsJava</id>
              </State>
              <State>
                <id>Java language level migration aidsJava</id>
              </State>
              <State>
                <id>LintAndroid</id>
              </State>
              <State>
                <id>Maven</id>
              </State>
              <State>
                <id>Numeric issuesJava</id>
              </State>
              <State>
                <id>PerformanceJava</id>
              </State>
              <State>
                <id>PerformanceLintAndroid</id>
              </State>
              <State>
                <id>Plugin DevKit</id>
              </State>
              <State>
                <id>SecurityLintAndroid</id>
              </State>
              <State>
                <id>Threading issuesGroovy</id>
              </State>
              <State>
                <id>Threading issuesJava</id>
              </State>
              <State>
                <id>UsabilityLintAndroid</id>
              </State>
              <State>
                <id>Verbose or redundant code constructsJava</id>
              </State>
            </expanded-state>
            <selected-state>
              <State>
                <id>Android</id>
              </State>
            </selected-state>
          </profile-state>
        </entry>
      </component>
      <component name="PropertiesComponent">
        <property name="last_opened_file_path" value="$USER_HOME$/java3/exercise2" />
        <property name="project.structure.last.edited" value="SDK Location" />
        <property name="project.structure.proportion" value="0.17" />
        <property name="project.structure.side.proportion" value="0.0" />
        <property name="settings.editor.selected.configurable" value="configurable.group.appearance" />
      </component>
      <component name="masterDetails">
        <states>
          <state key="ProjectJDKs.UI">
            <settings>
              <last-edited>java11</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ScopeChooserConfigurable.UI">
            <settings>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
        </states>
      </component>
    </defaultProject>
  </component>
</application>